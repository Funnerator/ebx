#!/usr/bin/env ruby

require 'commander/import'
require 'ebx'

program :version, Ebx::VERSION
program :description, 'eb eXtended'

global_option '-e ENVIRONMENT', String, 'Sets the AWS environment to run in'
global_option '-r REGION', String, 'Sets the AWS region to run in'
global_option '--verbose', 'be wordy'

command :init do |c|
  c.syntax = 'ebx init [options]'
  c.summary = 'Init a new project'

  c.action do |args, options|
    Ebx::Settings.init_config
  end
end


command :info do |c|
  c.syntax = 'ebx info [env] [options]'
  c.summary = 'show project settings'

  c.action do |args, options|
    setup_env(options)

    puts "  ====[#{Ebx.env}]===="
    puts "        Name: #{Ebx::Settings.get(:name)}"
    puts " Description: #{Ebx::Settings.get(:description)}"
    puts "      App ID: #{Ebx::Settings.get(:app_id)}"
    puts "       Stack: #{Ebx::Settings.get(:solution_stack)}"
    puts "     Regions: #{Ebx::Settings.regions.join(', ') }"
    puts ""

    if options.verbose
      Settings.get(:options).each do |ns, val|
        puts "[#{ns}]"
        val.each do |k,v|
          puts "  #{k} : #{v}"
        end
        puts ""
      end
    end
  end
end

command :start do |c|
  c.syntax = 'ebx start [env] [options]'
  c.summary = 'Create an environment'

  c.action do |args, options|
    setup_env(options)

    Ebx::DeployGroup.new.create
  end
end

command :stop do |c|
  c.syntax = 'ebx stop [env] [options]'
  c.summary = 'Stop a running environment'

  c.action do |args, options|
    setup_env(options)

    Ebx::DeployGroup.new.stop
  end
end

command :logs do |c|
  c.syntax = 'ebx log [env] [options]'
  c.summary = 'Retrieve logs'
  c.action do |args, options|
    setup_env(options)

    Ebx::AwsCredentialConfig.set_credentials
    Ebx::DeployGroup.new.logs
  end
end

command :status do |c|
  c.action do |args, options|
    setup_env(options)

    Ebx::DeployGroup.new.describe(options.verbose)
  end
end

command :shell do |c|
  c.syntax = 'ebx shell [env]'
  c.summary = 'ssh to one of the ec2 machines in [env]'

  c.action do |args, options|
    setup_env(options)

    ec2_id = Ebx::DeployGroup.new.ec2_instance_ids.first
    dns_name = AWS.ec2.instances[ec2_id].dns_name
    puts "ssh ec2-user@#{dns_name}\n"

    system "ssh ec2-user@#{dns_name}"
  end
end

command :config do |c|
  c.syntax = 'ebx config <command> [-l=location]'
  c.summary = ''

  c.action do |args, options|
    setup_env(options)
    cmd = parse_arg(args, 'show')

    case cmd
    when 'pull'
      Ebx::DeployGroup.new.pull_config_settings
    when 'show'
      Ebx::DeployGroup.new.print_config
    when 'push'
    end
  end
end

def setup_env(options)
  Ebx.env = options.e
  Ebx.regions = options.r ? [options.r] : nil
  say "Running in #{Ebx.env} environment"
  Ebx::AwsCredentialConfig.set_credentials
end

def parse_arg(args, default, possible_values=nil)
  val = args.shift || default
  if possible_values && !possible_values.include?(val)
    raise "#{val} not included in (#{possible_values.join(", ")})"
  end
  val
end

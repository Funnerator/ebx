#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'

require 'ebx'

program :version, '0.0.1'
program :description, 'eb eXtended'

DEFAULT_ENV = ['production', 'development', 'staging', 'test']
 
command :init do |c|
  c.syntax = 'ebx init [options]'
  c.summary = 'Init a new project'
 # c.description = 'test'
 # c.example 'description', 'command example'
 # c.option '--some-switch', 'Some switch that does something'
  #
  #
  ##
  #      queue.add(TryLoadEbConfigFileOperation(queue))
  #      queue.add(ReadAwsCredentialFileOperation(queue))
  #      queue.add(AskForConfigFileParameterOperation(queue))
  #      queue.add(ValidateParameterOperation(queue))
  #      queue.add(RotateOptionsettingFileOperation(queue))
  #      queue.add(SanitizeBranchOperation(queue))
  #      queue.add(UpdateAwsCredentialFileOperation(queue))
  #      queue.add(SanitizeAppVersionNameOperation(queue))
  #      queue.add(SaveEbConfigFileOperation(queue))
  #      queue.add(UpdateDevToolsConfigOperation(queue))
  #      queue.add(CheckGitIgnoreFileOperation(queue))
  # 
  c.action do |args, options|
    DEFAULT_ENV.each do |env|
      ENV['AWS_ENV'] = env
      Ebx::AwsEnvironmentConfig.init_config
    end
  end
end


#    elif command == CommandType.START:
#        queue.add(CheckGitIgnoreFileOperation(queue))
#        queue.add(LoadEbConfigFileOperation(queue))
#        queue.add(ReadAwsCredentialFileOperation(queue))
#        queue.add(TryGetCurrentBranchOperation(queue))
#        queue.add(AskForMissiongParameterOperation(queue))
#        queue.add(ValidateParameterOperation(queue))
#        queue.add(CreateApplicationOperation(queue))
#        queue.add(CreateApplicationVersionOperation(queue))
#        queue.add(CreateEnvironmentOperation(queue))
#        queue.add(SleepOperation(queue))
#        queue.add(SaveConfigurationSettingOperation(queue))
#        queue.add(WaitForCreateEnvironmentFinishOperation(queue))


command :start do |c|
  c.syntax = 'ebx start [env] [options]'
  c.summary = 'Create an environment'

  c.action do |args, options|
    ENV['AWS_ENV'] ||= (args.shift || 'development')

    Ebx::AwsCredentialConfig.set_credentials
    Ebx::DeployGroup.new.create
  end
end

command :stop do |c|
  c.syntax = 'ebx stop [env] [options]'
  c.summary = 'Stop a running environment'

  c.action do |args, options|
    ENV['AWS_ENV'] ||= (args.shift || 'development')

    Ebx::AwsCredentialConfig.set_credentials
    Ebx::DeployGroup.new.stop
  end
end

command :status do |c|
  c.action do |args, options|
    ENV['AWS_ENV'] ||= (args.shift || 'development')
    Ebx::AwsCredentialConfig.set_credentials

    settings = {
      app_name: 'test_app',
      app_description: 'test desc',
      version_description: 'a version'
    }
    env = Ebx::AwsEnvironment.new(settings)
    env.describe[:environments].each do |env|
      say env.to_s
    end
  end
end

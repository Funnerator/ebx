#!/usr/bin/env ruby

require 'commander/import'
require 'ebx'

program :version, Ebx::VERSION
program :description, 'eb eXtended'

global_option '-e ENVIRONMENT', String, 'Sets the AWS environment to run in (Default is development)'
global_option '-r REGION', String, 'Sets the AWS region to run in (Default is all regions)'
global_option '--verbose', 'be wordy'

command :init do |c|
  c.syntax = 'ebx init [options]'
  c.summary = 'Init a new project'

  c.action do |args, options|
    Ebx::Settings.init_config
  end
end


command :info do |c|
  c.syntax = 'ebx info [env] [options]'
  c.summary = 'show project settings'

  c.action do |args, options|
    setup_env(options)

    puts "  ====[#{Ebx.env}]===="
    puts "        Name: #{Ebx::Settings.get(:name)}"
    puts " Description: #{Ebx::Settings.get(:description)}"
    puts "      App ID: #{Ebx::Settings.get(:app_id)}"
    puts "       Stack: #{Ebx::Settings.get(:solution_stack)}"
    puts "     Regions: #{Ebx::Settings.regions.join(', ') }"
    puts ""

    if options.verbose
      Settings.get(:options).each do |ns, val|
        puts "[#{ns}]"
        val.each do |k,v|
          puts "  #{k} : #{v}"
        end
        puts ""
      end
    end
  end
end

command :deploy do |c|
  c.syntax = 'ebx deploy [env] [options]'
  c.summary = 'Deploy your application'

  c.action do |args, options|
    setup_env(options)

    Ebx::DeployGroup.new.deploy
  end
end

command :stop do |c|
  c.syntax = 'ebx stop [env] [options]'
  c.summary = 'Stop a running environment'

  c.action do |args, options|
    setup_env(options)

    Ebx::DeployGroup.new.stop
  end
end

command :restart do |c|
  c.syntax = 'ebx restart [env] [options]'
  c.summary = 'Restart the application'

  c.action do |args, options|
    setup_env(options)

    Ebx::DeployGroup.new.restart
  end
end

command :tasks do |c|
  c.syntax = 'ebx tasks [env] [options]'
  c.summary = 'Edit tasks run on deploy'

  c.action do |args, options|
    setup_env(options)

    case args[0]
    when 'swap'
    else
      puts Ebx::TaskGroup.new.list
    end
  end
end

command :logs do |c|
  c.syntax = 'ebx log [env] [options]'
  c.summary = 'Retrieve logs'
  c.option '-f', 'follow logs'

  c.action do |args, options|
    setup_env(options)

    Ebx::AwsCredentialConfig.set_credentials

    if options.f
      Ebx::AwsRemote.new.logs(true)
    else
      puts Ebx::DeployGroup.new.logs
    end
  end
end

command :status do |c|
  c.syntax = 'ebx status'
  c.summary = 'current EB environment status'
  c.action do |args, options|
    setup_env(options)

    puts Ebx::DeployGroup.new.describe(options.verbose)
  end
end

command :shell do |c|
  c.syntax = 'ebx shell [env]'
  c.summary = 'ssh to one of the ec2 machines in [env]'

  c.action do |args, options|
    setup_env(options)

    Ebx::AwsRemote.new.remote_shell
  end
end

command :console do |c|
  c.syntax = 'ebx console [env]'
  c.summary = 'start a rails console on one of the ec2 machines in [env]'

  c.action do |args, options|
    setup_env(options)

    Ebx::AwsRemote.new.console
  end
end

command :run do |c|
  c.syntax = 'ebx run <Type> [--all] <Task>'
  c.summary = 'run a remote rake task'
  c.option '--all-regions', 'Run in all regions'
  c.option '--all-machines', 'Run on all machines within a region'

  c.action do |args, options|
    setup_env(options)
    type = parse_arg(args, nil, ['rake'])
    cmd = args.join(' ')
    # error for --all and -r in same command
    if !options.r && !options.all_regions
      Ebx.regions = [Ebx::Settings.master_region]
    end

    case type
    when 'rake'
      Ebx::RemoteGroup.new.rake(cmd, {all_machines: options.all_machines})
    end
  end
end

command :config do |c|
  c.syntax = 'ebx config <command>'
  c.summary = 'access modify and push an EB config'

  c.action do |args, options|
    setup_env(options)
    cmd = parse_arg(args, 'show')

    case cmd
    when 'pull'
      Ebx::SettingsGroup.new.pull_config_settings
    when 'push'
      Ebx::SettingsGroup.new.push_config_settings
    when 'diff'
      puts Ebx::SettingsGroup.new.settings_diff
    when 'show'
      where = parse_arg(args, 'local', ['local', 'remote'])
      case where
      when 'local'
        puts Ebx::SettingsGroup.new.local
      when 'remote'
        puts Ebx::SettingsGroup.new.remote
      end
    end
  end
end

command :delete do |c|
  c.syntax = 'ebx delete'
  c.summary = 'delete application'

  c.action do |args, options|
    setup_env(options)
    Ebx::DeployGroup.new.delete_application
  end
end

command :routes do |c|
  c.syntax = 'ebx delete'
  c.summary = 'delete application'

  c.action do |args, options|
    setup_env(options)

    Ebx::Route53.new.status
  end
end

def setup_env(options)
  Ebx.env = options.e
  Ebx.regions = options.r ? [options.r] : nil
  say "Running in #{Ebx.env} environment"
  Ebx::AwsCredentialConfig.set_credentials
end

def parse_arg(args, default, possible_values=nil)
  val = args.shift || default
  if possible_values && !possible_values.include?(val)
    raise "#{val} not included in (#{possible_values.join(", ")})"
  end
  val
end
